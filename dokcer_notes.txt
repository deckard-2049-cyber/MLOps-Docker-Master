                                                Docker: Why and what?

Docker helps developer build, package and deploy applications quickly and efficiently. It solves the problem of "it works on my machine" by creating a consistent environment accross development, testing and production. Docker container encapsulate everything an app needs- code, libraries and dependencies ensuring it runs reliably on any system.

                                                Docker: It's Benefits

- Portability: Docker container can run consistantly accross different environments (development, testing, production) without worrying about OS or platform differences. For example, a container running on your laptop will work the same on a cloud server.

- Isolation: Each Docker container is isolated from others, which means apps won't interfere with one another. This is useful when running multiple services or apps on the same machine without worrying about compatibilty issues.

- Scalability: Docker makes scaling apps easier. For example, if a web service is getting high traffic, you can quickly spin up more containers to handle the load, and when traffic decreases, you can remove containers to save resources.

                                                    Docker vs VM

Docker: Containers share the host OS and use fewer resources, making them lightweight. Starting a container takes seconds. Example: If you need to run 10 microservices, each can run in its own container, using less memory and starting quickly.

VM: Virtual Machines run a full OS for each instance, making them heavy and slower to start(minutes). They consume more resources because they need to virtualize hardware, not just the app. Example: Running the same 10 microservices in VMs will require significantly more memory and CPU because each VM has its own OS.

In summary, Docker is lighter, faster and more portable compared to VMs, which are heavier and slower due to full OS virtualization.

                                                    Docker Engine

Docker Engine is the core technology that powers Docker, consisting of three main parts:-
- Docker Daemon (Server): This is the background service running on the host machine. It is responsible for managing docker objects like containers, images, networks and volumes. The daemon listens for API requests and performs the actions you request.
- REST API: This allows communication between the Docker Daemon and the client. You can use the API to interact with Docker, such as creating containers or images.
- Docker CLI (Client) : The command-line interface (CLI) is the tool you use to interact with Docker. When you type commands like docker run or docker build, the CLI sends instructions to the Docker Daemon via the REST API.