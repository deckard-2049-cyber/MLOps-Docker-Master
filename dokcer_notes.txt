                                                Docker: Why and what?

Docker helps developer build, package and deploy applications quickly and efficiently. It solves the problem of "it works on my machine" by creating a consistent environment accross development, testing and production. Docker container encapsulate everything an app needs- code, libraries and dependencies ensuring it runs reliably on any system.

                                                Docker: It's Benefits

- Portability: Docker container can run consistantly accross different environments (development, testing, production) without worrying about OS or platform differences. For example, a container running on your laptop will work the same on a cloud server.

- Isolation: Each Docker container is isolated from others, which means apps won't interfere with one another. This is useful when running multiple services or apps on the same machine without worrying about compatibilty issues.

- Scalability: Docker makes scaling apps easier. For example, if a web service is getting high traffic, you can quickly spin up more containers to handle the load, and when traffic decreases, you can remove containers to save resources.

                                                    Docker vs VM

Docker: Containers share the host OS and use fewer resources, making them lightweight. Starting a container takes seconds. Example: If you need to run 10 microservices, each can run in its own container, using less memory and starting quickly.

VM: Virtual Machines run a full OS for each instance, making them heavy and slower to start(minutes). They consume more resources because they need to virtualize hardware, not just the app. Example: Running the same 10 microservices in VMs will require significantly more memory and CPU because each VM has its own OS.

In summary, Docker is lighter, faster and more portable compared to VMs, which are heavier and slower due to full OS virtualization.

                                                    Docker Engine

Docker Engine is the core technology that powers Docker, consisting of three main parts:-
- Docker Daemon (Server): This is the background service running on the host machine. It is responsible for managing docker objects like containers, images, networks and volumes. The daemon listens for API requests and performs the actions you request.
- REST API: This allows communication between the Docker Daemon and the client. You can use the API to interact with Docker, such as creating containers or images.
- Docker CLI (Client) : The command-line interface (CLI) is the tool you use to interact with Docker. When you type commands like docker run or docker build, the CLI sends instructions to the Docker Daemon via the REST API.


                                                    Docker Image

- A docker image is a lightweight, standalone, and executable package that include everything needed to run a piece of software. It's read-only and is used to create containers.

Components of a Docker Image:
- Base Image: This is the starting point, usually a minimal OS or runtime.
- Layers: Each change (like installing software, adding files) in the image adds a new layer. Docker uses a layered filesystem, so layers are stacked to form the final image.
- Metadata: Contains information like the image's size, creation date, and instructions (like CMD or ENTRYPOINT) on how to run the container.


                                                Docker image lifecycle

- Creation: Build a new image using a Dockerfile or pull one from a registry (e.g., docker pull)
- Storage: Images are stored locally in your Docker environment and can be pushed to remote registries like Docker Hub.
- Distribution: Images can be shared or distributed by pushing them to a public/private registry, where others can pull and use them.
- Execution: When you run a Docker image, a container is created. This container is the live instance of the image.


                                                Docker Container

A Docker container is a lightweight, isolated, and executable environment created from a Docker image. It packages the application and all its dependencies, ensuring it runs consistantly in any environment.

Key Features:

- Isolation: Each container runs independently with its own filesystem and resources.
- Ephemeral: Containers can be started, stopped, or destroyed easily.
- Lightweight: Containers share the host OS kernel, making them faster and less resource-intensive than VMs.


1.  In order to create a Docker container, you need to create a dockerfile and need to specify the blueprints for the image building.

                                                    dockerfile

It is a text file with instructions on how to build a Docker image. It's a blueprint for the image, specifying the environment, app and dependencies.

Key components:-

- FROM: Specifies the base image.
- WORKDIR: Creates a directory to add files.
- COPY or ADD: Adds files from your host system into the image.
- RUN: Executes commands in the image, such as installing software.
- CMD or ENTRYPOINT: Defines the command that runs when the container starts.
- EXPOSE: Specifies the port the container will listen on.
- ARG: Defines build-time variables that can be passed during docker build.
- ENV: Sets environment variables inside the container at runtime.
- LABEL: Adds metadata such as author information or version details.
- VOLUME: Creates a mount point for persistent data storage.
- USER: Runs processes as a non-root user for security.
- HEALTHCHECK: Defines a command to check if the container is still running properly.
- SHELL: Changes the default shell (useful for Windows containers).
- ONBUILD: Executes instructions only when the image is used as a base for another image.
- STOPSIGNAL: Specifies the signal used to stop the container cleanly.



------------------------------------------------------------------------------------------------------------------------------------------

# Use an official lightweight Python image
FROM python:3.9-slim  ---- (This provides all the feature of python with less size)

# Set environment variables
ENV PYTHONUNBUFFERED=1 \    ----- (Ensures real-time log output by disabling Python output buffering)
    FLASK_APP=app.py \      ----- (Sets the entry point for the Flask application)
    FLASK_RUN_HOST=0.0.0.0 \  ----- (Allows the app to be accessed from outside the container)
    FLASK_ENV=production      ----- (Runs Flask in production mode for better performance and security)

# Create a non-root user for security
RUN groupadd -r flask && useradd -r -g flask flask (Creates a new user named flask to run the app safely without admin (root) access.)

{
    --> groupadd -r flask
    Creates a new user group named flask.
    The -r flag makes it a system group (used for services, not regular users).
    --> useradd -r -g flask flask
    Creates a new user named flask.
    -r: Creates a system user (without a home directory).
    -g flask: Assigns the user to the flask group created earlier.
}


# Set working directory
WORKDIR /app     ---- (Create a directoy named as app)

# Copy application files  
COPY . .   ---- (copy the contents from current directory into the app directory)

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose the application port
EXPOSE 5000 (Makes port 5000 available to the world outside this container)

# Health check to ensure container is running
HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD curl -f http://localhost:5000 || exit 1

{
    1️⃣ --interval=30s
    Runs the health check every 30 seconds.

    2️⃣ --timeout=10s
    Waits up to 10 seconds for a response before marking it as a failure.

    3️⃣ --retries=3
    If the check fails 3 times in a row, the container is marked as unhealthy.

    4️⃣ CMD curl -f http://localhost:5000 || exit 1
    Uses curl to send a request to http://localhost:5000.
    -f (fail silently) ensures an error is triggered if the response is not 200 OK.
    If the request fails, it runs exit 1, marking the check as failed.
}

# Change user to avoid running as root
USER flask

# Command to run the Flask application
CMD ["flask", "run", "--host=0.0.0.0"]  ---- (The reason we separate flask, run, and --host=0.0.0.0 as individual elements in a list is to avoid running the command inside a shell and ensure that Docker correctly executes the process.)


---------------------------------------------------------------------------------------------------------------------------------------

Docker Desktop - same as Git 
Docker Hub - same as GitHub


Install Docker Desktop
Sign in to Dockerhub and Docker Desktop
Docker Desktop:
> Check docker install: cli -> "docker"
> Pull the hello-world image and run it

- Build docker image: docker build -t flask-docker-demo .   (The -t flag tags the Docker image with a name (flask-docker-demo))
- Run the container: docker run -p 5000:5000 flask-docker-demo
            {
                1️⃣ docker run
                Starts a new container from a Docker image.

                2️⃣ -p 5000:5000
                Maps port 5000 from the container to port 5000 on your host machine.
                Format: -p <host-port>:<container-port>
                This allows you to access the app in your browser via http://localhost:5000.

                3️⃣ flask-docker-demo
                The name of the image to use for creating the container.
            }

- Tag your image: docker tag flask-docker-demo flask-docker-demo:latest1 (docker tag <image_name> <image_name>:<tag_name>)

            {
                1️⃣ docker tag
                Creates a new reference (tag) for an existing Docker image.

                2️⃣ flask-docker-demo
                The current name (existing image) that you want to tag.

                3️⃣ deckard2049cyber/flask-docker-demo:latest1
                The new tag for the image.
                deckard2049cyber/ → Represents a repository or username (useful for Docker Hub).
                flask-docker-demo → The image name.
                :latest1 → A tag/version for the image (you can use latest, v1.0, etc.).

            }

- Assure that you're logged in: docker login
- Lists all Docker images stored locally: docker images
- Remove a Specific Image by Name or ID: docker rmi <image_name_or_id>
- Stop an already running docker image container: docker stop <image_name_or_id>
- Push image to dockerhub: docker push flask-docker-demo:latest1
- Pull image from dockerhub: docker pull deckard2049cyber/flask-docker-demo:latest1
- Run the pulled image: docker run -p 5000:5000 deckard2049cyber/flask-docker-demo:latest1

difference between image and containers :- 
let's say you have a tent being folded and you unfold it build a tent. Here, the folded tent is called an image and the unfolded version is called the container.
🏠 Docker Image = House Blueprint (cannot be lived in directly).
🏡 Docker Container = A House built from the blueprint (usable and functional).

